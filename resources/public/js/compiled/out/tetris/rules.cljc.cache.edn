;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name tetris.rules, :imports nil, :requires {tetris.shapes tetris.shapes}, :uses {shapes tetris.shapes}, :defs {initial-state {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 4, :column 7, :end-line 4, :end-column 20, :arglists (quote ([]))}, :name tetris.rules/initial-state, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clear-row {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([{:keys [board], :as state} row]))}, :name tetris.rules/clear-row, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 16, :method-params ([p__27325 row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [board], :as state} row]))}, fall {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 51, :column 7, :end-line 51, :end-column 11, :arglists (quote ([state]))}, :name tetris.rules/fall, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 11, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, valid? {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 28, :column 7, :end-line 28, :end-column 13, :arglists (quote ([{:keys [board], :as state}]))}, :name tetris.rules/valid?, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 13, :method-params ([p__27316]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [board], :as state}]))}, rotate-ccw {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([shape]))}, :name tetris.rules/rotate-ccw, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 17, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, shape-coords {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 17, :column 7, :end-line 17, :end-column 19, :arglists (quote ([{:keys [shape-pos shape]}]))}, :name tetris.rules/shape-coords, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 19, :method-params ([p__27288]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [shape-pos shape]}]))}, game-step {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 66, :column 7, :end-line 66, :end-column 16, :arglists (quote ([{:keys [frame board speed], :as state}]))}, :name tetris.rules/game-step, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 16, :method-params ([p__27365]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [frame board speed], :as state}]))}, rotate-cw {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 13, :column 7, :end-line 13, :end-column 16, :arglists (quote ([shape]))}, :name tetris.rules/rotate-cw, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 16, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, x-shift {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([state f]))}, :name tetris.rules/x-shift, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 14, :method-params ([state f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state f]))}, score {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([{:keys [score high-score], :as state} amt]))}, :name tetris.rules/score, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 12, :method-params ([p__27309 amt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [score high-score], :as state} amt]))}, rotate {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([state f]))}, :name tetris.rules/rotate, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 13, :method-params ([state f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state f]))}, fast-drop {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljc/tetris/rules.cljc", :line 63, :column 7, :end-line 63, :end-column 16, :arglists (quote ([{:keys [board], :as state}]))}, :name tetris.rules/fast-drop, :variadic false, :file "src/cljc/tetris/rules.cljc", :end-column 16, :method-params ([p__27360]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [board], :as state}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:frame :speed :high-score :shape-pos :score :shape :board}, :order [:shape-pos :frame :score :high-score :speed :board :shape]}, :doc nil}