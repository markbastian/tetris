;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name tetris.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, rules tetris.rules, tetris.rules tetris.rules, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, atom reagent.core, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {c {:name tetris.core/c, :file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 11, :column 1, :end-line 11, :end-column 11, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 11, :column 10, :end-line 11, :end-column 11}}, state {:name tetris.core/state, :file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 12, :column 1, :end-line 12, :end-column 15, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 12, :column 10, :end-line 12, :end-column 15}}, hello-world {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 14, :column 7, :end-line 14, :end-column 18, :arglists (quote ([state]))}, :name tetris.core/hello-world, :variadic false, :file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 53, :column 7, :end-line 53, :end-column 19, :arglists (quote ([]))}, :name tetris.core/on-js-reload, :variadic false, :file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :stroke :key :else :default :fill :high-score :green :width :recur :div :h4 :red :score :blue :svg :x :h1 :rect :height :board :black}, :order [:board :score :high-score :div :h1 :svg :width :height :rect :key :x :y :stroke :fill :red :blue :green :default :black :h4 :recur :else]}, :doc nil}