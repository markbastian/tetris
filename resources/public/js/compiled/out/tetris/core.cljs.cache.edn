;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name tetris.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, rules tetris.rules, tetris.rules tetris.rules, cljs.core.async cljs.core.async, cljs.pprint cljs.pprint}, :uses {timeout cljs.core.async, pprint cljs.pprint, atom reagent.core, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {render {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([state]))}, :name tetris.core/render, :variadic false, :file "src/cljs/tetris/core.cljs", :end-column 13, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, setup-keys {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([k state]))}, :name tetris.core/setup-keys, :variadic false, :file "src/cljs/tetris/core.cljs", :end-column 17, :method-params ([k state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k state]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/mbastian/workspace/tetris/src/cljs/tetris/core.cljs", :line 58, :column 7, :end-line 58, :end-column 19, :arglists (quote ([]))}, :name tetris.core/on-js-reload, :variadic false, :file "src/cljs/tetris/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:y :stroke :key :else :default :fill :high-score :green :width :recur :div :h4 :red :score :blue :svg :x :h1 :rect :height :board :black}, :order [:board :score :high-score :div :h1 :svg :width :height :rect :key :x :y :stroke :fill :red :blue :green :default :black :h4 :recur :else]}, :doc nil}